<?php
  /**
  * @return \Symfony\Component\HttpFoundation\Request
  * The HttpFoundation component defines an object-oriented layer for the HTTP specification.
  * In PHP, the request is represented by some global variables ($_GET, $_POST, $_FILES, $_COOKIE, $_SESSION, ...)
  * and the response is generated by some functions (echo, header(), setcookie(), ...).
  * The Symfony HttpFoundation component replaces these default PHP global variables and functions by an object-oriented layer.
  */
  function request() {
    return \Symfony\Component\HttpFoundation\Request::createFromGlobals();
  }

  /*
   * Redirect to a target location
   * $path is address of the page we want to redirect to.
  */
  function redirect($path, $extra = []) {
    /* Response::create accepts 3 properties
     * 1st: the body of the respond. In this case, we dont need to return any data inside body, so we use null.
     * 2nd: the HTTP static code. We use HTTP_FOUND, which means the page is found.
     * 3rd: tell the page where to go with the location header. At here, redirect to books.php when a book is added.
    */
    $response = \Symfony\Component\HttpFoundation\Response::create(null,
              \Symfony\Component\HttpFoundation\Response::HTTP_FOUND,
              ['Location' => $path]);

    /*
    * For cookies
    * If cookies exits, set cookies
    */
    if (key_exists('cookies', $extra)) {
      foreach ($extra['cookies'] as $cookie) {
        $response->headers->setCookie($cookie);
      }
    }
    $response->send();
    exit;
  }

  /*
   *
   * ABOUT POST SECTION
   *
  */

  // Add post is available for user and admin
  function addPost($title, $description) {
    // Set $db in global scope
    global $db;

    // Set $ownerId = memberID
    $ownerId = decodeJwt('sub');

    try {
      // Insert into the database all posts that user add
      $query = 'INSERT INTO blog_posts (name, description, owner_id) VALUES (:name, :description, :ownerId)';
      // Start to declare statements
      // query: equivalent of $_GET
      $stmt = $db->prepare($query);
      // PDOStatement::bindParam — Binds a parameter to the specified variable name
      $stmt->bindParam(':name', $title);
      $stmt->bindParam(':description', $description);
      $stmt->bindParam(':ownerId', $ownerId);
      return $stmt->execute();

    } catch (\Exception $e) {
        throw $e;
    }
  }

  // Update post is available for admin and author of the post (ownerId)
  function updatePost($postId, $title, $description) {
      global $db;

      try {
          $query = "UPDATE blog_posts SET name=:name, description=:description WHERE postID=:postId";
          // Prepare the $query
          $stmt = $db->prepare($query);
          $stmt->bindParam(':name', $title);
          $stmt->bindParam(':description', $description);
          $stmt->bindParam(':postId', $postId);
          // Execute statements
          return $stmt->execute();

      } catch (\Exception $e) {
          throw $e;
      }
  }

  // Delete post is available for admin and author of the post
  function deletePost($postId) {
    global $db;

    try {
       $stmt = $db->prepare("DELETE from blog_posts where postID = ? ");
       $stmt->bindParam(1, $postId);
       $stmt->execute();
       return true;

    } catch (\Exception $e) {
       return false;
    }
  }

  // Display all posts in Posts List page
  function getAllPosts() {
      global $db;

      $userId = 0;
      // If user is Authenticated, get the 'sub' that contain memberId in $jwt in doLogin.php
      if (isAuthenticated()) {
        $userId = decodeJwt('sub');
      }

      try {
        // Score = sum of value in table votes
        $query = " SELECT blog_posts.*, sum(votes.value) as score, "
                  . " (SELECT value FROM votes "
                  . " WHERE votes.post_id = blog_posts.postID "
                  . " AND votes.user_id=:userId) as myVote "
                  . " FROM blog_posts "
                  . " LEFT JOIN votes ON (blog_posts.postID = votes.post_id) "
                  . " GROUP BY blog_posts.postID "
                  . " ORDER BY score DESC ";
        $stmt = $db->prepare($query);
        $stmt->bindParam(':userId', $userId);
        $stmt->execute();
        return $stmt->fetchAll();

      } catch (\Exception $e) {
          throw $e;
      }
  }

  // Get a post base on postId to update that post
  function getPost($id) {
      global $db;

      try {
          $query = "SELECT * FROM blog_posts WHERE postID = ?";
          $stmt = $db->prepare($query);
          $stmt->bindParam(1, $id);
          $stmt->execute();
          // Calling a single item, use fetch
          // PDOStatement::fetch — Fetches the next row from a result set
          // PDO::FETCH_ASSOC: returns an array indexed by column name as returned in your result set
          return $stmt->fetch(PDO::FETCH_ASSOC);

      } catch (\Exception $e) {
          throw $e;
      }
  }

  function vote($postId, $score) {
    global $db;
    // $userId = memberId in $jwt in doLogin.php
    $userId = decodeJwt('sub');

    try {
      $query = 'INSERT INTO votes (post_id, user_id, value) VALUES (:postId, :userId, :score)';
      $stmt = $db->prepare($query);
      $stmt->bindParam(':postId', $postId);
      $stmt->bindParam(':userId', $userId);
      $stmt->bindParam(':score', $score);
      $stmt->execute();

    } catch (\Exception $e) {
        die('Something happened with voting. Please try again.');
    }
  }

  // Clear the previous vote that user made
  function clearVote($postId) {
    global $db;
    // $userId = memberId in $jwt in doLogin.php
    $userId = decodeJwt('sub');

    try {
      $query = " DELETE FROM votes WHERE post_id = :postId AND user_id = :userId ";
      $stmt = $db->prepare($query);
      $stmt->bindParam(':postId', $postId);
      $stmt->bindParam(':userId', $userId);
      $stmt->execute();
      // PDOStatement::rowCount — Returns the number of rows affected by the last SQL statement
      return $stmt->rowCount();

    } catch (\Exception $e) {
        throw $e;
    }
  }

  /*
   *
   * ABOUT REGISTRATION SYSTEM
   *
  */

  function findUserByEmail($email) {
    global $db;

    try {
      $query = " SELECT * FROM blog_members WHERE email = :email ";
      $stmt = $db->prepare($query);
      $stmt->bindParam(':email', $email);
      $stmt->execute();
      // Might return empty array if no user is found. Or an array of all users in the database
      return $stmt->fetch(PDO::FETCH_ASSOC);

    } catch (\Exception $e) {
        throw $e;
    }
  }

  function createUser($username, $email, $password) {
    global $db;

    try {
      //Role_id = 2 for users.
      $query = " INSERT INTO blog_members (username, email, password, role_id) VALUES (:username, :email, :password, 2) ";
      $stmt = $db->prepare($query);
      $stmt->bindParam(':username', $username);
      $stmt->bindParam(':email', $email);
      $stmt->bindParam(':password', $password);
      $stmt->execute();
      return findUserByEmail($email);

    } catch (\Exception $e) {
        throw $e;
    }
  }

  /*
   *
   * ABOUT LOGIN
   *
  */

  // Return a specific item from $jwt or return the whole items if property = null.
  function decodeJwt($prop = null) {
    /**
       * You can add a leeway to account for when there is a clock skew times between
       * the signing and verifying servers. It is recommended that this leeway should
       * not be bigger than a few minutes.
       *
       * Source: http://self-issued.info/docs/draft-ietf-oauth-json-web-token.html#nbfDef
    **/

    // Firebase/JWT is a simple library to encode and decode JSON Web Tokens (JWT) in PHP
    // Decode $jwt in doLogin.php
    \Firebase\JWT\JWT::$leeway = 1;
    $jwt = \Firebase\JWT\JWT::decode(
      request()->cookies->get('access_token'),
      getenv('SECRET_KEY'),
      ['HS256']
    );

    if ($prop === null) {
      return $jwt;
    }

    return $jwt->{$prop};
  }

  // Check Authentication of users before giving permit to access certain area of the webpage
  function isAuthenticated() {
    // If we dont have access_token, return false( means: user did not login)
    if (!request()->cookies->has('access_token')) {
      return false;
    }

    // If we have access_token, validate the $jwt be decoding it to set user is Authenticated
    try {
      decodeJwt();
      return true;

    } catch (\Exception $e) {
        return false;
    }
  }

  // Check Authoritiy of current member
  function requireAuth() {
    global $session;

    // If user is not Authenticated, redirect to login.php
    if (!isAuthenticated()) {
      // Set a new cookies here, because the old cookies is expired.
      $accessToken = new Symfony\Component\HttpFoundation\Cookie("access_token", "Expired", time() - 3600, '/', getenv('COOKIE_DOMAIN'));

      // Return to login.php and show error message
      $session->getFlashBag()->add('error', 'Your target page is only available for members. Please login or register.');
      redirect('login.php', ['cookies' => [$accessToken]]);
    }
  }

  function requireAdmin() {
    global $session;

    if (!isAuthenticated()) {
      $accessToken = new Symfony\Component\HttpFoundation\Cookie("access_token", "Expired", time() - 3600, '/', getenv('COOKIE_DOMAIN'));
      redirect('login.php', ['cookies' => [$accessToken]]);
    }

    try {
      if (!decodeJwt('is_admin')) {
        $session->getFlashBag()->add('error', 'Not Authorized');
        redirect('login.php');
      }

    } catch (\Exception $e) {
      $accessToken = new Symfony\Component\HttpFoundation\Cookie("access_token", "Expired", time() - 3600, '/', getenv('COOKIE_DOMAIN'));
      redirect('../login.php', ['cookies' => [$accessToken]]);
    }
  }

  function isAdmin() {
    if (!isAuthenticated()) {
      return false;
    }

    try {
      // Decode $jwt, take role_id = 1 and set to $isAdmin
      $isAdmin = decodeJwt('is_admin');

    } catch (\Exception $e) {
        return false;
    }

    return (boolean)$isAdmin;
  }

  // If the current login user is the owner of the post, he/she can edit it
  function isOwner($ownerId) {
    if (!isAuthenticated()) {
      return false;
    }

    try {
      $userId = decodeJwt('sub');

    } catch (\Exception $e) {
        return false;
    }

    return $ownerId == $userId;
  }

  function display_errors() {
    global $session;

    // Chech if getFlashBag() has an 'error', if not then return.
    if (!$session->getFlashBag()->has('error')) {
      return;
    }

    // Get error
    $messages = $session->getFlashBag()->get('error');

    // Creat an alert with all errors messages
    $response = '<div class="alert alert-danger alert-dismissible text-center">
                  <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                  </button>';
    foreach ($messages as $message) {
      $response .= "{$message}<br />";
    }
    $response .= '</div>';

    return $response;
  }

  function display_success() {
    global $session;

    // Chech if getFlashBag() has an 'error', if not then return.
    if (!$session->getFlashBag()->has('success')) {
      return;
    }

    // Get error
    $messages = $session->getFlashBag()->get('success');

    // Creat an alert with all errors messages
    $response = '<div class="alert alert-success alert-dismissible text-center">
                  <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                  </button>';
    foreach ($messages as $message) {
      $response .= "{$message}<br />";
    }
    $response .= '</div>';

    return $response;
  }

  /*
   *
   * ABOUT CHANGE PASSWORD
   *
  */

  function findUserByAccessToken() {
    global $db;

    // Decode the 'sub' => "{$user['memberID']}" in $jwt
    try {
      $userId = decodeJwt('sub');

    } catch (\Exception $e) {
        throw $e;
    }

    // Return user's array from logged in user
    try {
      $query = " SELECT * FROM blog_members WHERE memberID = :userId ";
      $stmt = $db->prepare($query);
      $stmt->bindParam(':userId', $userId);
      $stmt->execute();
      // Might return empty array if no user is found. Or an array of all users in the database
      return $stmt->fetch(PDO::FETCH_ASSOC);

    } catch (\Exception $e) {
        throw $e;
    }
  }

  function updatePassword($password, $userId) {
    global $db;

    try {
      $query = 'UPDATE blog_members SET password = :password WHERE memberID = :userId';
      $stmt = $db->prepare($query);
      $stmt->bindParam(':password', $password);
      $stmt->bindParam(':userId', $userId);
      $stmt->execute();
    } catch (\Exception $e) {
        return false;
    }
    return true;
  }

  // ABOUT PROMOTE/ DEMOTE USER //

  function getAllUsers() {
    global $db;

    try {
      $query = 'SELECT * FROM blog_members';
      $stmt = $db->prepare($query);
      $stmt->execute();
      return $stmt->fetchAll(PDO::FETCH_ASSOC);

    } catch (\Exception $e) {
        throw $e;
    }
  }

  function promote($userId) {
    global $db;

    try {
      $query = " UPDATE blog_members SET role_id=1 WHERE memberID = ? ";
      $stmt = $db->prepare($query);
      $stmt->bindParam(1, $userId);
      $stmt->execute();

    } catch (\Exception $e) {
        throw $e;
    }
  }

  function demote($userId) {
    global $db;

    try {
      $query = " UPDATE blog_members SET role_id=2 WHERE memberID = ? ";
      $stmt = $db->prepare($query);
      $stmt->bindParam(1, $userId);
      $stmt->execute();

    } catch (\Exception $e) {
        throw $e;
    }
  }

  function getPostByName($name) {
      global $db;

      $userId = 0;
      // If user is Authenticated, get the 'sub' that contain memberId in $jwt in doLogin.php
      if (isAuthenticated()) {
        $userId = decodeJwt('sub');
      }

      try {
        $value = "%" . $name . "%";
        $query = " SELECT blog_posts.*, sum(votes.value) as score, "
                  . " (SELECT value FROM votes "
                  . " WHERE votes.post_id = blog_posts.postID "
                  . " AND votes.user_id=:userId) as myVote "
                  . " FROM blog_posts "
                  . " LEFT JOIN votes ON (blog_posts.postID = votes.post_id) "
                  . " WHERE blog_posts.name LIKE :value "
                  . " GROUP BY blog_posts.postID "
                  . " ORDER BY score DESC ";
        $stmt = $db->prepare($query);
        $stmt->bindParam(':userId', $userId);
        $stmt->bindParam(':value', $value);
          $stmt->execute();
          // Calling a single item, use fetch
          // PDOStatement::fetch — Fetches the next row from a result set
          // PDO::FETCH_ASSOC: returns an array indexed by column name as returned in your result set
          return $stmt->fetchAll();

      } catch (\Exception $e) {
          throw $e;
      }
  }
?>
